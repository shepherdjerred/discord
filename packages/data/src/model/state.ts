import { z } from "https://esm.sh/zod@3.22.4";
import { PlayerConfigEntrySchema } from "./playerConfigEntry.ts";
import { RankSchema } from "./rank.ts";
// @deno-types="npm:@types/lodash"
import _ from "npm:lodash@4.17.21";
import { PlayerConfig } from "./playerConfig.ts";
import { match } from "https://esm.sh/ts-pattern@5.0.5";

export type QueueType = z.infer<typeof QueueTypeSchema>;
export const QueueTypeSchema = z.enum(["solo", "flex"]);

// TODO get these from https://static.developer.riotgames.com/docs/lol/queues.json
export const soloQueueConfigId = 420;
export const flexQueueConfigId = 440;

export function parseQueueType(input: number): QueueType | undefined {
  return match(input)
    .returnType<QueueType | undefined>()
    .with(soloQueueConfigId, () => "solo")
    .with(flexQueueConfigId, () => "flex")
    .otherwise(() => undefined);
}

export type MatchPlayer = z.infer<typeof MatchPlayerSchema>;
export const MatchPlayerSchema = z.strictObject({
  player: PlayerConfigEntrySchema,
  rank: RankSchema.optional(),
});

export type MatchState = z.infer<typeof MatchStateSchema>;
export const MatchStateSchema = z.strictObject({
  // a way to uniquely identify this entry
  // generated by the application
  uuid: z.string(),
  // the time that this was added to the state
  added: z.string().pipe(z.coerce.date()),
  // the match id from the Riot API
  matchId: z.number(),
  queue: QueueTypeSchema,
  players: z.array(MatchPlayerSchema),
});

export type State = z.infer<typeof StateSchema>;
export const StateSchema = z.strictObject({
  gamesStarted: z.array(MatchStateSchema),
});

export function getPlayersInGame(players: PlayerConfig, state: State) {
  const playersInGame = _.flatMap(state.gamesStarted, (game) => game.players);
  return _.filter(players, (player) =>
    _.some(
      playersInGame,
      (matchPlayer) =>
        matchPlayer.player.league.leagueAccount.accountId ===
          player.league.leagueAccount.accountId,
    ));
}

export function getPlayersNotInGame(players: PlayerConfig, state: State) {
  const playersInGame = _.flatMap(state.gamesStarted, (game) => game.players);
  return _.reject(players, (player) =>
    _.some(
      playersInGame,
      (matchPlayer) =>
        matchPlayer.player.league.leagueAccount.accountId ===
          player.league.leagueAccount.accountId,
    ));
}
